{% extends './layout/default' %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.getCurrentRoute.getName, accountIds, start, end) }}
{% endblock %}

{% block content %}

     <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            {% include 'reports.partials.export_button' %}
        </div>
    </div>
    <div class="row no-print">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="box" id="optionsBox">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'options'|_ }}</h3>
                </div>
                <div class="box-body">
                    <ul class="list-inline">
                        {% for hide in hideable %}
                            <li><input
                                    {% if hide in defaultShow %}checked{% endif %}
                                    type="checkbox" class="audit-option-checkbox" name="option[]" value="{{ hide }}" id="option_{{ hide }}"/> <label
                                    for="option_{{ hide }}" style="font-weight:normal;">{{ trans('list.'~hide) }}</label></li>
                        {% endfor %}

                    </ul>
                </div>
            </div>
        </div>
    </div>


    {% for account in accounts %}
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="box">
                    <div class="box-header with-border">
                        <h3 class="box-title">{{ account.name }}</h3>
                    </div>
                    {% set url = route('accounts.show',account.id) %}
                    {% if not auditData[account.id].exists %}
                        <div class="box-body">

                            <em>
                                {{ trans('firefly.no_audit_activity',
                                    {
                                        account_name: account.name|escape,
                                        url: url,
                                        start: start.isoFormat(monthAndDayFormat),
                                        end: end.isoFormat(monthAndDayFormat),
                                    })|raw }}

                            </em>
                        </div>
                    {% else %}
                        <div class="box-body no-padding">
                            <p style="padding:10px;">
                                {{ trans('firefly.audit_end_balance',
                                    {
                                        account_name: account.name|escape,
                                        url: url,
                                        end: auditData[account.id].dayBefore,
                                        balance: formatAmountByAccount(account, auditData[account.id].dayBeforeBalance.balance)
                                    })|raw }}
                            </p>
                            {% include 'reports.partials.journals-audit'  with {'journals': auditData[account.id].journals,'account':account} %}

                            <p style="padding:10px;">

                                {{ trans('firefly.audit_end_balance',
                                    {
                                        account_name: account.name|escape,
                                        url: url,
                                        end: auditData[account.id].end,
                                        balance: formatAmountByAccount(account,auditData[account.id].endBalance)
                                    })|raw }}
                            </p>
                        </div>
                    {% endif %}
                </div>
            </div>
        </div>
    {% endfor %}

{% endblock %}
{% block styles %}
{% endblock %}
{% block scripts %}
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        var hideable = {{ hideable|json_encode|raw }};

        // URLs for export endpoints
        var exportXlsTransactionHistoryReportUrl = '{{ route('api.v1.data.export.xls.transaction-history-report') }}';
        var exportPdfTransactionHistoryReportUrl = '{{ route('api.v1.data.export.pdf.transaction-history-report') }}';
    </script>
    <script type="text/javascript" src="v1/js/ff/reports/all.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/reports/audit/all.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        var exportInProgress = false;

        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.textContent = message;
            const bgColor = type === 'success' ? '#28a745' : '#dc3545'; // Green for success, Red for error

            Object.assign(toast.style, {
                position: 'fixed',
                top: '20px',
                right: '20px',
                padding: '15px 20px',
                backgroundColor: bgColor,
                color: 'white',
                borderRadius: '5px',
                zIndex: '1050',
                opacity: '0',
                transform: 'translateY(-20px)',
                transition: 'opacity 0.3s, transform 0.3s',
                boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
            });

            document.body.appendChild(toast);

            // Fade and slide in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 100);

            // Fade and slide out
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 4000);
        }

        function handleExport(exportType, xlsUrl, pdfUrl, dataCollector, $button) {
            if (exportInProgress) return;
            exportInProgress = true;

            var originalText = $button.html();
            $button.addClass('disabled').prop('disabled', true).html('<span class="fa fa-spinner fa-spin"></span> Procesando...');

            setTimeout(() => {
                try {
                    const exportData = dataCollector();
                    console.log('Datos recopilados para procesar:', JSON.stringify(exportData, null, 2));

                    const exportUrl = exportType === 'xls' ? xlsUrl : pdfUrl;
                    const fileTypeMessage = exportType === 'xls' ? 'XLS' : 'PDF';
                    const fileTypeExtension = exportType === 'xls' ? '.xlsx' : '.pdf';

                    $.ajax({
                        url: exportUrl,
                        type: 'POST',
                        data: JSON.stringify(exportData),
                        contentType: 'application/json; charset=utf-8',
                        headers: {
                            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                        },
                        processData: false,
                        xhrFields: {
                            responseType: 'blob'
                        },
                        success: function(data, status, xhr) {
                            console.log('Respuesta recibida correctamente, Content-Type:', xhr.getResponseHeader('Content-Type'));
                            const contentType = xhr.getResponseHeader('Content-Type');
                            if (contentType && (contentType.includes('text/html') || contentType.includes('text/plain'))) {
                                const reader = new FileReader();
                                reader.onload = function() {
                                    showToast(`Error inesperado. El servidor respondió con HTML en lugar de ${fileTypeMessage}. Revisa la consola.`, 'error');
                                    console.error('Contenido de la respuesta HTML:', reader.result);
                                };
                                reader.readAsText(data);
                                return;
                            }
                            const blob = new Blob([data], {type: contentType || 'application/' + exportType});
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            const contentDisposition = xhr.getResponseHeader('Content-Disposition');
                            let fileName = 'reporte_' + moment().format('YYYYMMDD_HHmmss') + fileTypeExtension;
                            if (contentDisposition) {
                                const fileNameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                                if (fileNameMatch && fileNameMatch[1]) {
                                    fileName = fileNameMatch[1].replace(/['"]/g, '');
                                }
                            }
                            a.href = url;
                            a.download = fileName;
                            document.body.appendChild(a);
                            a.click();
                            setTimeout(() => {
                                window.URL.revokeObjectURL(url);
                                document.body.removeChild(a);
                            }, 100);
                            showToast(`El informe ${fileTypeMessage} se está descargando.`, 'success');
                        },
                        error: function(xhr, status, error) {
                            console.error('Error en la exportación:', error);
                            showToast('Error al generar el informe.', 'error');
                        },
                        complete: function() {
                            $button.removeClass('disabled').prop('disabled', false).html(originalText);
                            exportInProgress = false;
                        }
                    });
                } catch (e) {
                    console.error("Error durante la recolección de datos:", e);
                    showToast("Error durante la recolección de datos. Revisa la consola.", 'error');
                    $button.removeClass('disabled').prop('disabled', false).html(originalText);
                    exportInProgress = false;
                }
            }, 10);
        }

        function collectAuditReportData() {
            const allRows = [];
            $('.box').not('#optionsBox').find('table').each(function() {
                $(this).find('tbody tr').each(function() {
                    const row = [];
                    $(this).find('td').each(function() {
                        row.push($(this).text().trim());
                    });
                    if(row.length > 0) {
                        allRows.push(row);
                    }
                });
            });

            const exportData = {
                accountBalanceTableData: allRows,
                creditCardChartAccountName: "",
                creditCardChartDateRange: "",
                creditCardChartDateLabels: [],
                creditCardChartDebtValues: [],
                cashWalletChartDateLabels: [],
                cashWalletChartMoneyValues: []
            };

            return exportData;
        }

        var initialAjaxCompleted = false;
        function setupExportClickHandlers() {
            if (initialAjaxCompleted) return;
            initialAjaxCompleted = true;
            
            $('#exportXlsLink').off('click').on('click', function(e) {
                e.preventDefault();
                handleExport('xls', exportXlsTransactionHistoryReportUrl, exportPdfTransactionHistoryReportUrl, collectAuditReportData, $(this));
            });

            $('#exportPdfLink').off('click').on('click', function(e) {
                e.preventDefault();
                handleExport('pdf', exportXlsTransactionHistoryReportUrl, exportPdfTransactionHistoryReportUrl, collectAuditReportData, $(this));
            });
            console.log("Manejadores de clic para informes de auditoría adjuntados.");
        }

        $(document).ajaxStop(function() {
            setupExportClickHandlers();
        });
        
        $(document).ready(function() {
            setTimeout(function() {
                if (!initialAjaxCompleted) {
                     console.warn("ajaxStop no se disparó, adjuntando manejadores de clic directamente.");
                     setupExportClickHandlers();
                }
            }, 2000);
        });
    </script>
{% endblock %}
