{% extends './layout/default' %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.getCurrentRoute.getName, accountIds, start, end) }}
{% endblock %}

{% block content %}
   <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            {% include 'reports.partials.export_button' %}
        </div>
    </div>
    {# chart #}
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'accountBalances'|_ }}</h3>
                </div>
                <div class="box-body">
                    <canvas id="account-balances-chart" style="width:100%;height:400px;" height="400" width="100%"></canvas>
                </div>
            </div>
        </div>
    </div>

    {# account balances and income vs. expense #}
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'accountBalances'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="accountReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'incomeVsExpenses'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="incomeVsExpenseReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>

    {# in and out #}
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'income'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="incomeReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expenses'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="expenseReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8 col-md-8 col-sm-12">
            <div class="box">

                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'budgets'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="budgetReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>


        </div>
        <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'categories'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="categoryReport"></div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'budgets'|_ }} ({{ 'splitByAccount'|_|lower }})</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="balanceReport">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'bills'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="billReport"></div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
{% endblock %}
{% block styles %}
    <link rel="stylesheet" href="v1/css/bootstrap-sortable.css?v={{ FF_VERSION }}" type="text/css" media="all" nonce="{{ JS_NONCE }}">
{% endblock %}
{% block scripts %}

    <script type="text/javascript" src="v1/js/lib/bootstrap-sortable.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/lib/Chart.bundle.min.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/charts.defaults.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/charts.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        var year = {{ start.year }};
        var month = {{ start.month }};

        // to report another URL:
        var startDate = '{{ start.format('Ymd') }}';
        var endDate = '{{ end.format('Ymd') }}';
        var reportType = '{{ reportType }}';
        var accountIds = '{{ accountIds }}';

        var accountReportUrl = '{{ route('report-data.account.general', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var categoryReportUrl = '{{ route('report-data.category.operations', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var budgetReportUrl = '{{ route('report-data.budget.general', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var balanceReportUrl = '{{ route('report-data.balance.general', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var incomeReportUrl = '{{ route('report-data.operations.income', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var expenseReportUrl = '{{ route('report-data.operations.expenses', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var incExpReportUrl = '{{ route('report-data.operations.operations', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var billReportUrl = '{{ route('report-data.bills.overview', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var accountChartUrl = '{{ route('chart.account.report', [accountIds, start.format('Ymd'), end.format('Ymd')]) }}';

        // URL para el endpoint de exportación XLS (generación del archivo)
        var exportXlsDefaultReportUrl = '{{ route('api.v1.data.export.xls.default-report') }}';
        // No necesitamos la URL de descarga si no vamos a descargar

    </script>
    <script type="text/javascript" src="v1/js/ff/reports/all.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/reports/default/all.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/reports/default/month.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>

    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        var dataCollectionAttempted = false;

        function normalizeCurrencyString(originalCellText) {
            if (typeof originalCellText !== 'string' || originalCellText.trim() === "") {
                return originalCellText;
            }

            let cleanedText = originalCellText.replace(/[€$]/g, '').trim(); // Quitar símbolos de moneda comunes y espacios

            const hasDot = cleanedText.includes('.');
            const hasComma = cleanedText.includes(',');

            if (hasDot && hasComma) {
                if (cleanedText.lastIndexOf(',') > cleanedText.lastIndexOf('.')) {
                    // Formato: 1.234,56 (coma es decimal)
                    cleanedText = cleanedText.replace(/\./g, ''); // Quitar puntos (miles)
                    cleanedText = cleanedText.replace(/,/g, '.'); // Coma a punto (decimal)
                } else {
                    // Formato: 1,234.56 (punto es decimal)
                    cleanedText = cleanedText.replace(/,/g, ''); // Quitar comas (miles)
                }
            } else if (hasComma) {
                // Solo comas, no puntos. Ej: "1234,56" o "1,234"
                // Heurística: si una coma es seguida por 1 o 2 dígitos al final, es decimal. Sino, separador de miles.
                if (/,(\d{1,2})$/.test(cleanedText) && (cleanedText.match(/,/g) || []).length === 1) {
                    cleanedText = cleanedText.replace(/,/g, '.'); // Coma a punto (decimal)
                } else {
                    cleanedText = cleanedText.replace(/,/g, ''); // Quitar comas (miles)
                }
            } else if (hasDot) {
                // Solo puntos, no comas. Ej: "123.45" o "1.234.567"
                const dotCount = (cleanedText.match(/\./g) || []).length;
                if (dotCount > 1) {
                    // Múltiples puntos, asumimos separadores de miles (ej: "200.000" -> "200000")
                    cleanedText = cleanedText.replace(/\./g, '');
                }
                // Si solo hay un punto (ej: "123.45"), parseFloat lo maneja bien.
            }

            const numericValue = parseFloat(cleanedText);
            return isNaN(numericValue) ? originalCellText : numericValue;
        }

        /**
         * Normaliza una cadena que representa un valor de porcentaje a un número.
         * @param {string} originalCellText El texto de la celda.
         * @returns {number|string} El valor numérico o el texto original si no se puede convertir.
         */
        function normalizePercentageString(originalCellText) {
            if (typeof originalCellText !== 'string' || originalCellText.trim() === "") {
                return originalCellText;
            }
            let cleanedText = originalCellText.replace(/%/g, '').trim(); // Quitar símbolo de porcentaje
            if (cleanedText.includes(',')) { // Asumir coma como decimal para porcentajes
                cleanedText = cleanedText.replace(/,/g, '.');
            }
            const numericValue = parseFloat(cleanedText);
            return isNaN(numericValue) ? originalCellText : numericValue;
        }
        
        function parseHtmlTable(tableContainerId) {
            const data = [];
            const $table = $(`#${tableContainerId}`).find('table');
            if ($table.length === 0) {
                console.warn(`[${tableContainerId}] No se encontró la tabla.`);
                return data;
            }

            const headerRow = [];
            $table.find('thead tr th').each(function() {
                headerRow.push($(this).text().trim());
            });

            // MODIFICACIÓN: No añadir la cabecera desde el frontend si el backend ya las maneja.
            // if (headerRow.length > 0) {
            //     if (tableContainerId === 'budgetReport' && headerRow.length === 9 && headerRow[6] === "") {
            //         // console.log(`[${tableContainerId}] Cabecera original:`, JSON.stringify(headerRow));
            //         headerRow.splice(6, 1); 
            //         // console.log(`[${tableContainerId}] Cabecera modificada:`, JSON.stringify(headerRow));
            //     }
            //     data.push(headerRow); // Comentado o eliminado para no enviar cabeceras desde el frontend
            // } else {
            //     console.warn(`[${tableContainerId}] No se pudo determinar la cabecera de la tabla.`);
            // }

            // Procesar tbody y tfoot
            $table.find('tbody tr, tfoot tr').each(function(rowIndex) {
                const currentRow = $(this);
                const row = [];
                const isInTfoot = currentRow.closest('tfoot').length > 0;

                // if (tableContainerId === 'budgetReport') {
                //     console.log(`[budgetReport ${isInTfoot ? 'tfoot' : 'tbody'}] HTML de la fila ${rowIndex}:`, currentRow.html());
                //     console.log(`[budgetReport ${isInTfoot ? 'tfoot' : 'tbody'}] Celdas encontradas en fila ${rowIndex}:`, currentRow.find('td').length);
                // }

                currentRow.find('td').each(function(cellIndex) {
                    let cellText = $(this).text().trim();

                    if (tableContainerId === 'accountReport' && cellIndex === 0) {
                        row.push(cellText); 
                    } else if (tableContainerId === 'budgetReport') {
                        // Columnas de salida deseadas para XLS (8): Budget, Date, Budgeted, pct, Spent, pct, Left, Overspent

                        if (isInTfoot) {
                            // Mapeo para TFOOT de budgetReport
                            // Asumimos que el HTML tiene 7 <td> elementos:
                            // td[0] (colspan=2): Suma
                            // td[1]: Budgeted
                            // td[2]: pct. (budgeted) - vacío
                            // td[3]: Spent
                            // td[4]: pct. (spent) - vacío
                            // td[5]: CELDA VACÍA INESPERADA
                            // td[6]: Valor de 'Left'
                            // El valor de 'Overspent' para el tfoot se asumirá como 0 si no hay td[7]

                            if (cellIndex === 0) { // td[0] "Sum (Euro)" (colspan="2")
                                row.push(cellText); // Columna 'Budget' para XLS
                                row.push("");       // Columna 'Date' para XLS (vacía en tfoot)
                            } else if (cellIndex === 1) { // td[1] 'Budgeted'
                                row.push(normalizeCurrencyString(cellText));
                            } else if (cellIndex === 2) { // td[2] 'pct.' (budgeted)
                                row.push(""); 
                            } else if (cellIndex === 3) { // td[3] 'Spent'
                                row.push(normalizeCurrencyString(cellText));
                            } else if (cellIndex === 4) { // td[4] 'pct.' (spent)
                                row.push("");
                            }
                            // cellIndex === 5 es la celda HTML td[5] que sospechamos está vacía y no debe ir a 'Left'.
                            // La omitimos para la asignación directa a 'Left'.
                            // La omitimos para la asignación directa a 'Left'.
                            else if (cellIndex === 6) { // Esta es la celda HTML td[6], que contiene el valor real de 'Left'.
                                row.push(normalizeCurrencyString(cellText)); // Asignar a la columna 'Left' del XLS.
                                // Como el HTML tfoot probablemente solo tiene 7 <td> (hasta td[6]),
                                // y la cabecera del XLS espera 8 columnas,
                                // necesitamos añadir un valor para 'Overspent'.
                                // Si la imagen HTML correcta muestra "Overspent: 0,00 €" para el tfoot, usamos 0.
                                row.push(normalizeCurrencyString("0,00 €")); // O simplemente row.push(0);
                            }
                            // Si hubiera una td[7] para Overspent, se manejaría aquí.
                            // Como no esperamos una td[7] según la hipótesis, el bucle 'each' terminará después de cellIndex === 6.
                        } else { // Lógica para TBODY (asumiendo que el tbody tiene 9 celdas por fila)
                            if (cellIndex === 0) { // Budget
                                row.push(cellText);
                            } else if (cellIndex === 1) { // Date
                                row.push(cellText);
                            } else if (cellIndex === 2) { // Budgeted
                                row.push(normalizeCurrencyString(cellText));
                            } else if (cellIndex === 3) { // pct. (Budgeted)
                                row.push(normalizePercentageString(cellText));
                            } else if (cellIndex === 4) { // Spent
                                row.push(normalizeCurrencyString(cellText));
                            } else if (cellIndex === 5) { // pct. (Spent)
                                row.push(normalizePercentageString(cellText));
                            }
                            // cellIndex === 6 es la celda vacía en tbody, se omite para el XLS.
                            else if (cellIndex === 7) { // Left
                                row.push(normalizeCurrencyString(cellText));
                            } else if (cellIndex === 8) { // Overspent
                                row.push(normalizeCurrencyString(cellText));
                            }
                        }
                    } else {
                        // Lógica general de parseo para otras tablas
                        // Asumimos que son valores monetarios por defecto si no son casos especiales
                        if (cellText.toLowerCase().includes('sum of sums')) { // Mantener texto especial
                            row.push(cellText);
                        } else {
                            row.push(normalizeCurrencyString(cellText));
                        }
                    }
                });

                if (row.length > 0) {
                    // const actualHeaderRowForComparison = data.length > 0 ? data[0] : []; // Ya no es necesario si no enviamos cabeceras
                    // if (actualHeaderRowForComparison.length > 0 && row.length !== actualHeaderRowForComparison.length) {
                        // console.warn(`[${tableContainerId}${isInTfoot ? ' tfoot' : ''}] Discrepancia en columnas para fila ${rowIndex}: Cabecera tiene ${actualHeaderRowForComparison.length}, Fila de datos tiene ${row.length}. Cabecera:`, actualHeaderRowForComparison, `Datos:`, row);
                    // }
                    // if (!(data.length === 1 && row.every(cell => cell === "" || cell === null || typeof cell === 'undefined'))) { // Esta lógica podría necesitar ajuste si la primera fila ahora es de datos
                    data.push(row);
                    // }
                }
            });
            return data;
        }

        function collectAndTriggerExport() { 
            if (dataCollectionAttempted) return;
            dataCollectionAttempted = true;

            const $exportButton = $('#exportXlsLink');
            var originalText = $exportButton.html();
            $exportButton.addClass('disabled').prop('disabled', true).html('<span class="fa fa-spinner fa-spin"></span> Procesando...');

            const exportData = {
                chartDateLabels: [], // Modificado: Inicializar como array vacío
                chartBalanceValues: [], // Modificado: Inicializar como array vacío
                accountBalancesTableData: [],
                incomeVsExpensesTableData: [],
                revenueIncomeTableData: [],
                expensesTableData: [],
                budgetsTableData: [],
                categoriesTableData: [],
                budgetSplitAccountTableData: [],
                subscriptionsTableData: []
            };

            if (typeof window.accountBalancesChart !== 'undefined' && window.accountBalancesChart.data) {
                const chartInstance = window.accountBalancesChart; // Para facilitar la lectura
                const chartLabels = chartInstance.data.labels;
                const datasets = chartInstance.data.datasets;

                if (chartLabels && chartLabels.length > 0) {
                    // Usar etiquetas del gráfico si están disponibles
                    // No se añade cabecera explícita para chartDateLabels aquí; se asume que el backend la maneja.
                    chartLabels.forEach((label, index) => { 
                        console.log(`[Chart Label ${index}] Original:`, label, typeof label); // Añadir typeof label

                        const momentDate = moment(label, "MMMM Do, YYYY", "es");
                        
                        console.log(`[Chart Label ${index}] MomentDate Object:`, momentDate);
                        console.log(`[Chart Label ${index}] Is Valid:`, momentDate.isValid());
                        
                        const formattedLabel = momentDate.isValid() ? momentDate.format("YYYY-MM-DD") : label;
                        console.log(`[Chart Label ${index}] Formatted:`, formattedLabel);
                        
                        exportData.chartDateLabels.push([formattedLabel]);
                    });

                    if (datasets && datasets.length > 0 && datasets[0].data && datasets[0].data.length > 0) {
                        // Si hay datos en el dataset, usarlos
                        if (datasets[0].label) { 
                            exportData.chartBalanceValues.push([datasets[0].label]); // Modificado: Usar push para añadir la etiqueta del dataset como cabecera
                        }
                        datasets[0].data.forEach(value => {
                            // Asegurarse de que los valores de saldo sean números si es necesario,
                            // aunque Chart.js usualmente los maneja como números.
                            // El backend parece esperar números para los saldos.
                            exportData.chartBalanceValues.push([parseFloat(value)]);
                        });
                    } else {
                        // Hay etiquetas pero no valores de datos, rellenar con ceros
                        if (datasets && datasets.length > 0 && datasets[0].label) { 
                            exportData.chartBalanceValues.push([datasets[0].label]); // Modificado: Usar push para añadir la etiqueta del dataset como cabecera
                        }
                        chartLabels.forEach(() => exportData.chartBalanceValues.push([0]));
                    }
                } else {
                    // No hay etiquetas del gráfico, usar fechas de inicio/fin del informe
                    // No se añaden cabeceras explícitas aquí; se asume que el backend las maneja.
                    console.warn('El gráfico no tiene etiquetas. Usando fechas de inicio/fin del informe para chartDateLabels.');
                    const formattedStartDate = moment(startDate, "YYYYMMDD").format("YYYY-MM-DD"); // Asume que startDate es YYYYMMDD
                    exportData.chartDateLabels.push([formattedStartDate]);
                    exportData.chartBalanceValues.push([0]); 

                    if (startDate !== endDate) {
                        const formattedEndDate = moment(endDate, "YYYYMMDD").format("YYYY-MM-DD"); // Asume que endDate es YYYYMMDD
                        exportData.chartDateLabels.push([formattedEndDate]);
                        exportData.chartBalanceValues.push([0]); 
                    }
                }
            } else {
                // window.accountBalancesChart no está definido o no tiene .data
                // No se añaden cabeceras explícitas aquí; se asume que el backend las maneja.
                console.warn('window.accountBalancesChart no está definido o no tiene datos. Usando fallback para chartDateLabels y chartBalanceValues.');
                const formattedStartDate = moment(startDate, "YYYYMMDD").format("YYYY-MM-DD");
                exportData.chartDateLabels.push([formattedStartDate]);
                exportData.chartBalanceValues.push([0]);

                if (startDate !== endDate) {
                    const formattedEndDate = moment(endDate, "YYYYMMDD").format("YYYY-MM-DD");
                    exportData.chartDateLabels.push([formattedEndDate]);
                    exportData.chartBalanceValues.push([0]);
                }
            }

            exportData.accountBalancesTableData = parseHtmlTable('accountReport');
            exportData.incomeVsExpensesTableData = parseHtmlTable('incomeVsExpenseReport');
            exportData.revenueIncomeTableData = parseHtmlTable('incomeReport');
            exportData.expensesTableData = parseHtmlTable('expenseReport');
            exportData.budgetsTableData = parseHtmlTable('budgetReport');
            exportData.categoriesTableData = parseHtmlTable('categoryReport');
            exportData.budgetSplitAccountTableData = parseHtmlTable('balanceReport');
            exportData.subscriptionsTableData = parseHtmlTable('billReport');

            console.log('Datos recopilados para procesar:', JSON.stringify(exportData, null, 2));

            $.ajax({
                url: exportXlsDefaultReportUrl,
                type: 'POST', 
                contentType: 'application/json; charset=utf-8', 
                data: JSON.stringify(exportData), 
                dataType: 'json', 
                success: function(response) {
                    if (response.filename && response.path) {
                        console.log('Informe generado en el servidor:', response.filename, 'en la ruta:', response.path);
                        alert('El informe XLS se ha generado en el servidor.');
                    } else {
                        console.error('Respuesta inesperada del servidor:', response);
                        alert('Error: El servidor no devolvió la información del archivo esperada.');
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    // El error "Undefined array key chartDateLabels" sugiere que el backend NO está recibiendo el cuerpo
                    // o no lo está procesando como esperas para una petición GET.
                    console.error('Error en la generación del XLS:', textStatus, errorThrown, jqXHR.responseText);
                    alert('Error al generar el informe XLS. Consulta la consola para más detalles.');
                },
                complete: function() {
                    $exportButton.removeClass('disabled').prop('disabled', false).html(originalText);
                    dataCollectionAttempted = false;
                }
            });
        }

        var initialAjaxCompleted = false;
        $(document).ajaxStop(function() {
            if (!initialAjaxCompleted) {
                initialAjaxCompleted = true;
                
                $('#exportXlsLink').off('click').on('click', function(e) {
                    e.preventDefault();
                    if ($(this).hasClass('disabled')) {
                        return;
                    }
                    dataCollectionAttempted = false; 
                    collectAndTriggerExport(); // Llamar a la función renombrada
                });
                console.log("Manejador de clic para procesamiento XLS adjuntado después de ajaxStop.");
            }
        });
        
        $(document).ready(function() {
            setTimeout(function() {
                if (!initialAjaxCompleted) {
                     console.warn("ajaxStop no se disparó, adjuntando manejador de clic para XLS directamente.");
                     $('#exportXlsLink').off('click').on('click', function(e) {
                        e.preventDefault();
                        if ($(this).hasClass('disabled')) {
                            return;
                        }
                        dataCollectionAttempted = false;
                        collectAndTriggerExport();
                    });
                }
            }, 2000);
        });

    </script>
{% endblock %}
