{% extends './layout/default' %}

{% block breadcrumbs %}
    {{ Breadcrumbs.render(Route.getCurrentRoute.getName, accountIds, categoryIds, start, end) }}
{% endblock %}

{% block content %}
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12">
            {% include 'reports.partials.export_button' %}
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'accounts'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="accountsHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-12 col-xs-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'categories'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="categoriesHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'account_per_category'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="accountPerCategoryHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-4 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expense_per_category'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="category-out-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'income_per_category'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="category-in-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expense_per_budget'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="budgets-out-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expense_per_source_account'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="source-out-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'income_per_source_account'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="source-in-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expense_per_destination_account'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="dest-out-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'income_per_destination_account'|_ }}</h3>
                </div>
                <div class="box-body">
                    <div style="width:100%;margin:0 auto;">
                        <canvas id="dest-in-pie-chart" style="width:100%;height:250px;" height="250"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {% for category in categories %}
        <div class="row">
            <div class="col-lg-12">
                <div class="box main_budget_chart">
                    <div class="box-header with-border">
                        <h3 class="box-title">{{ 'income_and_expenses'|_ }} ({{ category.name }})</h3>
                    </div>
                    <div class="box-body">
                        <canvas class="main_category_canvas" data-url="{{ route('chart.category.main', [accountIds, category.id, start.format('Ymd'), end.format('Ymd')]) }}" id="in-out-chart-{{ category.id }}" style="width:100%;height:400px;" height="400" width="100%"></canvas>
                    </div>
                </div>
            </div>
        </div>
    {% endfor %}
    <div class="row">
        <div class="col-lg-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'average_spending_per_destination'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="avgExpensesHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'average_earning_per_source'|_ }}</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="avgIncomeHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'expenses'|_ }} ({{ trans('firefly.topX', {number: listLength}) }})</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="topExpensesHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="box">
                <div class="box-header with-border">
                    <h3 class="box-title">{{ 'income'|_ }} ({{ trans('firefly.topX', {number: listLength}) }})</h3>
                </div>
                <div class="box-body table-responsive no-padding" id="topIncomeHolder">
                </div>
                {# loading indicator #}
                <div class="overlay">
                    <span class="fa fa-refresh fa-spin"></span>
                </div>
            </div>
        </div>
    </div>

{% endblock %}

{% block scripts %}
    <script type="text/javascript" src="v1/js/lib/Chart.bundle.min.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/charts.defaults.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/ff/charts.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" src="v1/js/lib/bootstrap-sortable.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>

    <script type="text/javascript" src="v1/js/ff/reports/all.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>
    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        // to report another URL:
        var startDate = '{{ start.format('Ymd') }}';
        var endDate = '{{ end.format('Ymd') }}';
        var accountIds = '{{ accountIds }}';
        var categoryIds = '{{ categoryIds }}';


        var accountsUrl = '{{ route('report-data.category.accounts', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var categoriesUrl = '{{ route('report-data.category.categories', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var accountPerCategoryUrl = '{{ route('report-data.category.account-per-category', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';

        // pie charts:
        var categoryOutUrl = '{{ route('chart.category.category-expense', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var categoryInUrl = '{{ route('chart.category.category-income', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var budgetsOutUrl = '{{ route('chart.category.budget-expense', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var sourceOutUrl = '{{ route('chart.category.source-expense', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var sourceInUrl = '{{ route('chart.category.source-income', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var destOutUrl = '{{ route('chart.category.dest-expense', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var destInUrl = '{{ route('chart.category.dest-income', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';

        var avgExpensesUrl = '{{ route('report-data.category.avg-expenses', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var topExpensesUrl = '{{ route('report-data.category.top-expenses', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var avgIncomeUrl = '{{ route('report-data.category.avg-income', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';
        var topIncomeUrl = '{{ route('report-data.category.top-income', [accountIds, categoryIds, start.format('Ymd'), end.format('Ymd')]) }}';

        // URL para el endpoint de exportación XLS (generación del archivo)
        var exportXlsCategoryReportUrl = '{{ route('api.v1.data.export.xls.category-report') }}';
        // URL para el endpoint de exportación PDF (generación del archivo)
        var exportPdfCategoryReportUrl = '{{ route('api.v1.data.export.pdf.category-report') }}';

    </script>
    <script type="text/javascript" src="v1/js/ff/reports/category/month.js?v={{ FF_VERSION }}" nonce="{{ JS_NONCE }}"></script>

    <script type="text/javascript" nonce="{{ JS_NONCE }}">
        var exportInProgress = false;

        function showToast(message, type = 'success') {
            const toast = document.createElement('div');
            toast.textContent = message;
            const bgColor = type === 'success' ? '#28a745' : '#dc3545'; // Green for success, Red for error

            Object.assign(toast.style, {
                position: 'fixed',
                top: '20px',
                right: '20px',
                padding: '15px 20px',
                backgroundColor: bgColor,
                color: 'white',
                borderRadius: '5px',
                zIndex: '1050',
                opacity: '0',
                transform: 'translateY(-20px)',
                transition: 'opacity 0.3s, transform 0.3s',
                boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
            });

            document.body.appendChild(toast);

            // Fade and slide in
            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateY(0)';
            }, 100);

            // Fade and slide out
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 4000);
        }

        function normalizeCurrencyString(originalCellText) {
            if (typeof originalCellText !== 'string' || originalCellText.trim() === "") {
                return originalCellText;
            }

            let cleanedText = originalCellText.replace(/[€$]/g, '').trim();

            const hasDot = cleanedText.includes('.');
            const hasComma = cleanedText.includes(',');

            if (hasDot && hasComma) {
                if (cleanedText.lastIndexOf(',') > cleanedText.lastIndexOf('.')) {
                    cleanedText = cleanedText.replace(/\./g, '').replace(/,/g, '.');
                } else {
                    cleanedText = cleanedText.replace(/,/g, '');
                }
            } else if (hasComma) {
                if (/,(\d{1,2})$/.test(cleanedText) && (cleanedText.match(/,/g) || []).length === 1) {
                    cleanedText = cleanedText.replace(/,/g, '.');
                } else {
                    cleanedText = cleanedText.replace(/,/g, '');
                }
            } else if (hasDot) {
                const dotCount = (cleanedText.match(/\./g) || []).length;
                if (dotCount > 1) {
                    cleanedText = cleanedText.replace(/\./g, '');
                }
            }

            const numericValue = parseFloat(cleanedText);
            return isNaN(numericValue) ? originalCellText : numericValue;
        }

        function parseHtmlTable(tableContainerId) {
            const data = [];
            const $table = $(`#${tableContainerId}`).find('table');
            if ($table.length === 0) {
                console.warn(`[${tableContainerId}] No se encontró la tabla.`);
                return data;
            }

            $table.find('tbody tr, tfoot tr').each(function() {
                const row = [];
                $(this).find('td').each(function() {
                    let cellText = $(this).text().trim();
                    // For category report, don't normalize everything, as some columns are dates/text
                    row.push(cellText);
                });
                if (row.length > 0) {
                    data.push(row);
                }
            });
            return data;
        }

        function getChartData(chartInstance) {
            if (!chartInstance || !chartInstance.data || !chartInstance.data.labels || !chartInstance.data.datasets) {
                return [];
            }
            const labels = chartInstance.data.labels;
            const data = chartInstance.data.datasets[0].data;
            const result = [];
            labels.forEach((label, index) => {
                result.push([label, data[index]]);
            });
            return result;
        }

        function getBarChartData(chartInstance) {
            if (!chartInstance || !chartInstance.data || !chartInstance.data.labels || !chartInstance.data.datasets || chartInstance.data.datasets.length === 0) {
                return { categories: [], values: [] };
            }
            const labels = chartInstance.data.labels;
            const datasets = chartInstance.data.datasets;

            const categories = [['Category'], ...labels.map(l => [l])];
            const values = [];
            
            datasets.forEach(dataset => {
                const datasetValues = [[dataset.label]];
                dataset.data.forEach(value => {
                    datasetValues.push([value.y ? value.y : value]);
                });
                values.push(...datasetValues.slice(1)); // Flatten data
            });


            return { categories: categories, values: values };
        }

        function handleExport(exportType, xlsUrl, pdfUrl, dataCollector, $button) {
            if (exportInProgress) return;
            exportInProgress = true;

            var originalText = $button.html();
            $button.addClass('disabled').prop('disabled', true).html('<span class="fa fa-spinner fa-spin"></span> Procesando...');

            setTimeout(() => {
                try {
                    const exportData = dataCollector();
                    console.log('Datos recopilados para procesar:', JSON.stringify(exportData, null, 2));

                    const exportUrl = exportType === 'xls' ? xlsUrl : pdfUrl;
                    const fileTypeMessage = exportType === 'xls' ? 'XLS' : 'PDF';
                    const fileTypeExtension = exportType === 'xls' ? '.xlsx' : '.pdf';

                    $.ajax({
                        url: exportUrl,
                        type: 'POST',
                        data: JSON.stringify(exportData),
                        contentType: 'application/json; charset=utf-8',
                        headers: {
                            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
                        },
                        processData: false,
                        xhrFields: {
                            responseType: 'blob'
                        },
                        success: function(data, status, xhr) {
                            console.log('Respuesta recibida correctamente, Content-Type:', xhr.getResponseHeader('Content-Type'));
                            const contentType = xhr.getResponseHeader('Content-Type');
                            if (contentType && (contentType.includes('text/html') || contentType.includes('text/plain'))) {
                                const reader = new FileReader();
                                reader.onload = function() {
                                    showToast(`Error inesperado. El servidor respondió con HTML en lugar de ${fileTypeMessage}. Revisa la consola.`, 'error');
                                    console.error('Contenido de la respuesta HTML:', reader.result);
                                };
                                reader.readAsText(data);
                                return;
                            }
                            const blob = new Blob([data], {type: contentType || 'application/' + exportType});
                            const url = window.URL.createObjectURL(blob);
                            const a = document.createElement('a');
                            const contentDisposition = xhr.getResponseHeader('Content-Disposition');
                            let fileName = 'reporte_' + moment().format('YYYYMMDD_HHmmss') + fileTypeExtension;
                            if (contentDisposition) {
                                const fileNameMatch = contentDisposition.match(/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/);
                                if (fileNameMatch && fileNameMatch[1]) {
                                    fileName = fileNameMatch[1].replace(/['"]/g, '');
                                }
                            }
                            a.href = url;
                            a.download = fileName;
                            document.body.appendChild(a);
                            a.click();
                            setTimeout(() => {
                                window.URL.revokeObjectURL(url);
                                document.body.removeChild(a);
                            }, 100);
                            showToast(`El informe ${fileTypeMessage} se está descargando.`, 'success');
                        },
                        error: function(xhr, status, error) {
                            console.error('Error en la exportación:', error);
                            showToast('Error al generar el informe.', 'error');
                        },
                        complete: function() {
                            $button.removeClass('disabled').prop('disabled', false).html(originalText);
                            exportInProgress = false;
                        }
                    });
                } catch (e) {
                    console.error("Error durante la recolección de datos:", e);
                    showToast("Error durante la recolección de datos. Revisa la consola.", 'error');
                    $button.removeClass('disabled').prop('disabled', false).html(originalText);
                    exportInProgress = false;
                }
            }, 10);
        }

        function collectCategoryReportData() {
            const exportData = {
                accountsTableData: parseHtmlTable('accountsHolder'),
                categoriesTableData: parseHtmlTable('categoriesHolder'),
                accountPerCategoryTableHeaders: [],
                accountPerCategoryTableData: parseHtmlTable('accountPerCategoryHolder'),
                avgExpenseDestAccountTableData: parseHtmlTable('avgExpensesHolder'),
                avgEarningSourceAccountTableData: parseHtmlTable('avgIncomeHolder'),
                topExpensesTableData: parseHtmlTable('topExpensesHolder'),
                topRevenueTableData: parseHtmlTable('topIncomeHolder'),
                expensePerCategoryChartData: [],
                incomePerCategoryChartData: [],
                expensePerBudgetChartData: [],
                expensesPerSourceAccountChartData: [],
                incomePerSourceAccountChartData: [],
                expensesPerDestinationAccountChartData: [],
                incomePerDestinationAccountChartData: [],
                barChartsPerCategoryData: []
            };

            const $accountPerCategoryTable = $('#accountPerCategoryHolder').find('table');
            $accountPerCategoryTable.find('thead tr th').each(function() {
                exportData.accountPerCategoryTableHeaders.push($(this).text().trim());
            });

            if (window.categoryOutPieChart) {
                exportData.expensePerCategoryChartData = [['Category', 'Amount'], ...getChartData(window.categoryOutPieChart)];
            }
            if (window.categoryInPieChart) {
                exportData.incomePerCategoryChartData = [['Category', 'Amount'], ...getChartData(window.categoryInPieChart)];
            }
            if (window.budgetsOutPieChart) {
                exportData.expensePerBudgetChartData = [['Budget', 'Amount'], ...getChartData(window.budgetsOutPieChart)];
            }
            if (window.sourceOutPieChart) {
                exportData.expensesPerSourceAccountChartData = [['Source Account', 'Amount'], ...getChartData(window.sourceOutPieChart)];
            }
            if (window.sourceInPieChart) {
                exportData.incomePerSourceAccountChartData = [['Source Account', 'Amount'], ...getChartData(window.sourceInPieChart)];
            }
            if (window.destOutPieChart) {
                exportData.expensesPerDestinationAccountChartData = [['Destination Account', 'Amount'], ...getChartData(window.destOutPieChart)];
            }
            if (window.destInPieChart) {
                exportData.incomePerDestinationAccountChartData = [['Destination Account', 'Amount'], ...getChartData(window.destInPieChart)];
            }

            $('.main_category_canvas').each(function() {
                const canvas = this;
                const chartInstance = Chart.getChart(canvas);
                if (chartInstance) {
                    const $box = $(canvas).closest('.box');
                    const title = $box.find('.box-title').text().trim();
                    const chartData = getBarChartData(chartInstance);

                    exportData.barChartsPerCategoryData.push({
                        title: title,
                        categories: chartData.categories,
                        values: chartData.values
                    });
                }
            });

            return exportData;
        }

        var initialAjaxCompleted = false;
        function setupExportClickHandlers() {
            if (initialAjaxCompleted) return;
            initialAjaxCompleted = true;
            
            $('#exportXlsLink').off('click').on('click', function(e) {
                e.preventDefault();
                handleExport('xls', exportXlsCategoryReportUrl, exportPdfCategoryReportUrl, collectCategoryReportData, $(this));
            });

            $('#exportPdfLink').off('click').on('click', function(e) {
                e.preventDefault();
                handleExport('pdf', exportXlsCategoryReportUrl, exportPdfCategoryReportUrl, collectCategoryReportData, $(this));
            });
            console.log("Manejadores de clic para informes de categoría adjuntados.");
        }

        $(document).ajaxStop(function() {
            setupExportClickHandlers();
        });
        
        $(document).ready(function() {
            setTimeout(function() {
                if (!initialAjaxCompleted) {
                     console.warn("ajaxStop no se disparó, adjuntando manejadores de clic directamente.");
                     setupExportClickHandlers();
                }
            }, 2000);
        });
    </script>

{% endblock %}

{% block styles %}
    <link rel="stylesheet" href="v1/css/bootstrap-sortable.css?v={{ FF_VERSION }}" type="text/css" media="all" nonce="{{ JS_NONCE }}">
{% endblock %}
